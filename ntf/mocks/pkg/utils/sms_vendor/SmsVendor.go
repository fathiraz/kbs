// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"
	sms_vendor "ntf/config/sms_vendor"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SmsVendor is an autogenerated mock type for the SmsVendor type
type SmsVendor struct {
	mock.Mock
}

// Data provides a mock function with given fields:
func (_m *SmsVendor) Data() sms_vendor.SmsVendorConfig {
	ret := _m.Called()

	var r0 sms_vendor.SmsVendorConfig
	if rf, ok := ret.Get(0).(func() sms_vendor.SmsVendorConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sms_vendor.SmsVendorConfig)
	}

	return r0
}

// Send provides a mock function with given fields: ctx, payload
func (_m *SmsVendor) Send(ctx context.Context, payload []byte) (interface{}, error) {
	ret := _m.Called(ctx, payload)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) interface{}); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Toggle provides a mock function with given fields: ctx, isActive
func (_m *SmsVendor) Toggle(ctx context.Context, isActive bool) error {
	ret := _m.Called(ctx, isActive)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, isActive)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSmsVendor creates a new instance of SmsVendor. It also registers a cleanup function to assert the mocks expectations.
func NewSmsVendor(t testing.TB) *SmsVendor {
	mock := &SmsVendor{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
